#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 11 16:03:51 2021

@author: artsloan
"""

import numpy as np
from pytest import approx
import pyBayesThresh as pbt
import matplotlib.pyplot as plt


#%% Test beta_laplace.py

x = np.array([-2,1,0,-4,5])
y_valid = np.array([+0.889852029651143,
                    -0.380041716606011,
                    -0.561817771773154,
                    +285.459466672351,
                    +15639.8849145429])
y = pbt.beta_laplace(x)

assert pbt.beta_laplace(x) == approx(y_valid,)

#%% Test beta_cauchy.py
x = np.array([-2,1,0,-4,5])
y_valid = np.array([+0.597264024732662,
                    -0.351278729299872,
                    -0.500000000000000,
                    +185.247374190108,
                    +10732.4514608350])

assert pbt.beta_cauchy(x) == approx(y_valid,)

#%% Test post_mean with the laplace prior
x = np.array([-2,1,0,-4,5])
y_valid = np.array([-1.01158962199946,
                    +0.270953305249239,
                    0.0,
                    -3.48800924041643,
                    +4.4997151290092])

assert pbt.post_mean(x,prior='laplace') == approx(y_valid,)

#%% Test post_mean with the cauchy prior
x = np.array([-2,1,0,-4,5])
y_valid = np.array([-0.807489729485063,
                    +0.213061319425267,
                    0.0,
                    -3.48264328130604,
                    +4.59959010481196])

assert pbt.post_mean(x,prior='cauchy') == approx(y_valid,)
#%% Test post_med with the laplace prior
x = np.array([-2,1,0,-4,5])
y_valid = np.array([-0.829992882781227,
                    0.0,
                    0.0,
                    -3.49568406354978,
                    +4.49992059554046])

assert pbt.post_med(x,prior='laplace') == approx(y_valid,)
#%% Test post_med with the cauchy prior
x = np.array([-2,1,0,-4,5])
y_valid = np.array([-0.398555518768262,
                    0.0,
                    0.0,
                    -3.50192235462600,
                    +4.60455881926464])

assert pbt.post_med(x,prior='cauchy') == approx(y_valid,)

#%% Test thresh_from_weight with the laplace prior
w = np.arange(0.2,0.8,0.2)
y_valid = np.array([+2.44873377028853,
                    +1.92279064562172,
                    +1.40956187155098,
                    +0.767900790087879])

assert pbt.thresh_from_weight(w,prior='laplace')[0] == approx(y_valid)

#%% Test thresh_from_weight with the cauchy prior
w = np.arange(0.2,0.8,0.2)
y_valid = np.array([+2.60031945683295,
                    +2.05919773929054,
                    +1.51366172562120,
                    +0.818831556534860])

assert pbt.thresh_from_weight(w,prior='cauchy')[0] == approx(y_valid)

#%% Test thresh_from_data with the laplace prior
x = np.array([-0.560475647, -0.230177489, 1.558708314, 0.070508391, 0.129287735, 1.715064987, 
              0.460916206, -1.265061235, -0.686852852, -0.445661970, 1.224081797, 0.359813827,
              0.400771451, 0.110682716, -0.555841135, 1.786913137, 0.497850478, -1.966617157,
              0.701355902, -0.472791408, -1.067823706, -0.217974915, -1.026004448, -0.728891229,
              -0.625039268, -1.686693311, 0.837787044, 0.153373118, -1.138136937, 1.253814921, 
              0.426464221, -0.295071483, 0.895125661, 0.878133488, 0.821581082, 0.688640254, 
              0.553917654, -0.061911711, -0.305962664, -0.380471001, -0.694706979, -0.207917278, 
              -1.265396352, 2.168955965, 1.207961998, -1.123108583, -0.402884835, -0.466655354,
              0.779965118, -0.083369066, 0.253318514, -0.028546755, -0.042870457, 1.368602284,
              -0.225770986, 1.516470604, -1.548752804, 0.584613750, 0.123854244, 0.215941569,
              0.379639483, -0.502323453, -0.333207384, -1.018575383, -1.071791226, 0.303528641,
              0.448209779, 0.053004227, 0.922267468, 2.050084686, -0.491031166, -2.309168876,
              1.005738524, -0.709200763, -0.688008616, 1.025571370, -0.284773007, -1.220717712,
              0.181303480, -0.138891362, 0.005764186, 0.385280401, -0.370660032, 0.644376549,
              -0.220486562, 0.331781964, 1.096839013, 0.435181491, -0.325931586, 1.148807618,
              0.993503856, 0.548396960, 0.238731735, -0.627906076, 1.360652449, -0.600259587,
              2.187332993, 1.532610626, -0.235700359, -1.026420900])
y_valid = +3.03485425654799

assert pbt.thresh_from_data(x,prior='laplace')[0] == approx(y_valid)

#%% Test weight_from_thresh with the laplace prior
x = np.arange(1,6)
y_valid = np.array([+0.734187187788918,
                    +0.368633767549335,
                    +0.0661925474440213,
                    +0.00348003803260551,
                    +6.39312743790131e-05])

assert pbt.weight_from_thresh(x,prior='laplace') == approx(y_valid)

#%% Test weight_from_thresh with the cauchy prior
x = np.arange(1,6)
y_valid = np.array([0.753193469037590,
                    0.422963403263506,
                    0.0933799336485299,
                    0.00534477537944352,
                    9.31590884344020e-05])

assert pbt.weight_from_thresh(x,prior='cauchy') == approx(y_valid)

#%% Test weight_from_data with the laplace prior
x = np.array([-0.560475647, -0.230177489, 1.558708314, 0.070508391, 0.129287735, 1.715064987, 
              0.460916206, -1.265061235, -0.686852852, -0.445661970, 1.224081797, 0.359813827,
              0.400771451, 0.110682716, -0.555841135, 1.786913137, 0.497850478, -1.966617157,
              0.701355902, -0.472791408, -1.067823706, -0.217974915, -1.026004448, -0.728891229,
              -0.625039268, -1.686693311, 0.837787044, 0.153373118, -1.138136937, 1.253814921, 
              0.426464221, -0.295071483, 0.895125661, 0.878133488, 0.821581082, 0.688640254, 
              0.553917654, -0.061911711, -0.305962664, -0.380471001, -0.694706979, -0.207917278, 
              -1.265396352, 2.168955965, 1.207961998, -1.123108583, -0.402884835, -0.466655354,
              0.779965118, -0.083369066, 0.253318514, -0.028546755, -0.042870457, 1.368602284,
              -0.225770986, 1.516470604, -1.548752804, 0.584613750, 0.123854244, 0.215941569,
              0.379639483, -0.502323453, -0.333207384, -1.018575383, -1.071791226, 0.303528641,
              0.448209779, 0.053004227, 0.922267468, 2.050084686, -0.491031166, -2.309168876,
              1.005738524, -0.709200763, -0.688008616, 1.025571370, -0.284773007, -1.220717712,
              0.181303480, -0.138891362, 0.005764186, 0.385280401, -0.370660032, 0.644376549,
              -0.220486562, 0.331781964, 1.096839013, 0.435181491, -0.325931586, 1.148807618,
              0.993503856, 0.548396960, 0.238731735, -0.627906076, 1.360652449, -0.600259587,
              2.187332993, 1.532610626, -0.235700359, -1.026420900])
y_valid = +0.0609124723599925

assert pbt.weight_from_data(x,prior='laplace') == approx(y_valid)

#%% Test weight_from_data with the cauchy prior
x = np.array([-0.560475647, -0.230177489, 1.558708314, 0.070508391, 0.129287735, 1.715064987, 
              0.460916206, -1.265061235, -0.686852852, -0.445661970, 1.224081797, 0.359813827,
              0.400771451, 0.110682716, -0.555841135, 1.786913137, 0.497850478, -1.966617157,
              0.701355902, -0.472791408, -1.067823706, -0.217974915, -1.026004448, -0.728891229,
              -0.625039268, -1.686693311, 0.837787044, 0.153373118, -1.138136937, 1.253814921, 
              0.426464221, -0.295071483, 0.895125661, 0.878133488, 0.821581082, 0.688640254, 
              0.553917654, -0.061911711, -0.305962664, -0.380471001, -0.694706979, -0.207917278, 
              -1.265396352, 2.168955965, 1.207961998, -1.123108583, -0.402884835, -0.466655354,
              0.779965118, -0.083369066, 0.253318514, -0.028546755, -0.042870457, 1.368602284,
              -0.225770986, 1.516470604, -1.548752804, 0.584613750, 0.123854244, 0.215941569,
              0.379639483, -0.502323453, -0.333207384, -1.018575383, -1.071791226, 0.303528641,
              0.448209779, 0.053004227, 0.922267468, 2.050084686, -0.491031166, -2.309168876,
              1.005738524, -0.709200763, -0.688008616, 1.025571370, -0.284773007, -1.220717712,
              0.181303480, -0.138891362, 0.005764186, 0.385280401, -0.370660032, 0.644376549,
              -0.220486562, 0.331781964, 1.096839013, 0.435181491, -0.325931586, 1.148807618,
              0.993503856, 0.548396960, 0.238731735, -0.627906076, 1.360652449, -0.600259587,
              2.187332993, 1.532610626, -0.235700359, -1.026420900])
y_valid = +0.0864429263465871

assert pbt.weight_from_data(x,prior='cauchy') == approx(y_valid)

#%% Test weight_and_scale_from_data
y_valid = (0.371583145802847,3.0)

assert pbt.weight_and_scale_from_data(x) == approx(y_valid)

#%% Test e_bayes_thresh with a laplace prior
x = np.array([0.253318514, -0.028546755, -0.042870457, 1.368602284, 
              -0.225770986, 1.516470604, -1.548752804, 0.584613750, 
              0.123854244, 0.215941569, 0.379639483, -0.502323453, 
              -0.333207384, -1.018575383, -1.071791226, 0.303528641, 
              0.448209779, 0.053004227, 0.922267468, 2.050084686, 
              -0.491031166, -2.30916887, 1.005738524, -0.709200763, 
              -0.688008616, 1.025571370, -0.284773007, -1.220717712, 
              0.181303480, -0.138891362, 0.005764186, 0.385280401, 
              -0.370660032, 0.644376549, -0.220486562, 0.331781964, 
              1.096839013, 0.435181491, -0.325931586, 1.148807618,
              0.993503856, 0.548396960, 0.238731735, -0.627906076, 
              1.360652449, -0.600259587, 2.187332993, 1.532610626, 
              -0.235700359, -1.026420900, -1.831357857, -0.203471270, 
              2.870724750, -0.206525817, -0.693043097, 3.385102249, 
              0.136927943, -4.198064406, -1.753932224, 0.027672669, 
              1.872816632, 1.327591976, -0.816339807, 0.165803466, 
              -0.592275066, 3.874979636, 1.101377151, -4.573940322, 
              0.553007457, -1.969711606, -2.018000815, -1.383424444, 
              -2.542566340, -1.713874651, 0.593783470, -4.025336523, 
              1.910960661, 0.384707085, -3.238130508, 2.436321756,
              2.297479301, -0.138638913, 1.831484244, 1.333770143, 
              -0.410085058, 2.508617722, -0.352804764, 0.616124090, 
              1.297178242, -2.204835163, -0.687629622, -0.678032045, 
             -4.102936862, 2.823244277, 0.814387823, -2.777123689, 
             -2.267525256, -0.245393934, 3.660039177, -1.453768609])
              
y_valid = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0.461501932251305,0,-1.18081131503738,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0.87949485647377,0,0,0,0,0,2.18630700818864,0,0,
          2.83745453837867,0,-3.69477351123594,0,0,0,0,0,0,0,
          3.36467539856769,0,-4.07317568417785,0,-0.141700670497741,
          -0.343683094401104,0,-1.65608219851322,0,0,-3.5191992174366,
          0,0,-2.66613200774895,1.45289341778632,1.15387225239285,
          0,0,0,0,1.59321391647936,0,0,0,-0.925903664068815,0,0,
          -3.59828116583749,2.11687940619439,0,-2.04737147690392,
          -1.08310726061405,0,3.13925967166472,0])

assert pbt.e_bayes_thresh(x,prior='laplace',sdev=1) == approx(y_valid)

#%% Test e_bayes_thresh with a cauchy prior

y_valid = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    1.48841500179492, 0, -3.34299827594683, 0, 0, 0, 0, 0, 0,
                    0, 2.77056945625230, 0, -3.88082346352579, 0, 0, 0, 0, 0,
                    0, 0, -3.05396129851543, 0, 0, -0.876381911876676, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.18803377526410, 0, 0,
                    0, 0, 0, 2.29446725610846, 0])

assert pbt.e_bayes_thresh(x,prior='cauchy') == approx(y_valid)

#%% Test the denoising functionality

def gaussian(x, amp, cen, wid):
    """1-d gaussian: gaussian(x, amp, cen, wid)"""
    return (amp / (np.sqrt(2*np.pi) * wid)) * np.exp(-(x-cen)**2 / (2*wid**2))


def line(x, slope, intercept):
    """a line"""
    return slope*x + intercept

x = np.linspace(-10,10,100)
y1 = gaussian(x,20,0.5,1)
y2 = gaussian(x,6,-2,2)
y3 = line(x,0.03,0.2)
rng = np.random.default_rng(seed=12345)
yn = rng.standard_normal(x.size)
y = y1 + y2 + y3 + yn

y_valid = np.array([-0.505961254143474, -0.542183936326586, -0.567301287058434,
                    -0.521257733752482, -0.441525845040691, -0.360383184533682,
                    -0.267549228492499, -0.154387673859145, -0.0388918303944857,
                    0.0917652573153354, 0.215657207504568, 0.264554826446669,
                    0.280042213144107, 0.296112126524686, 0.301975258772859,
                    0.289700410418795, 0.275997894669592, 0.250416633907705,
                    0.231558846189434, 0.282986697537974, 0.368109285668576,
                    0.440304807242923, 0.522682005270725, 0.652757676101443,
                    0.786847991761917, 0.951617826006185, 1.10364833743006,
                    1.10125443717714, 1.03783944139161, 0.973118558956795,
                    0.898127525701514, 0.838582301106636, 0.802239492126230,
                    0.742925809883821, 0.715399037659722, 0.831060495635249,
                    1.00455315266551, 1.29655143822928, 1.62696416359607,
                    1.75731589335953, 1.88267586324832, 1.96929586689245,
                    2.11802025280601, 2.76090801337098, 3.62629833122892,
                    4.40569845827841, 5.22409534031027, 6.27018450106220,
                    7.28217090327285, 8.41659956329281, 9.39568670603067,
                    9.35828079904119, 8.85401174792690, 8.20892664823494,
                    7.38120061871064, 6.52443802464558, 5.64215216625877,
                    4.60359634988357, 3.57046693607616, 2.91246255835890,
                    2.40236709168860, 1.98149592266700, 1.62190974574737,
                    1.13411442344413, 0.652561561851518, 0.187782962554794,
                    -0.218653674886964, -0.371638202617181, -0.395335784046729,
                    -0.387776960214000, -0.322892501622723, -0.190609928962734,
                    -0.0350607877113661, 0.181586737624145, 0.395878768935572,
                    0.421075388918711, 0.369647483890074, 0.324475777227003,
                    0.260930343854216, 0.174031923211841, 0.0923665976700037,
                    -0.0168262789391035, -0.107943261234688, -0.0378565950188182, 
                    0.104752537787889, 0.237316581471536, 0.389093771605861,
                    0.591471056872629, 0.791152049836727, 1.02569987764212,
                    1.23239023480426, 1.21700701641513, 1.10178043488729,
                    0.970949192583676, 0.805846623299200, 0.617997812760855,
                    0.428723345376913, 0.202099815112344, -0.0118281211109277,
                    -0.0778055155008839])
assert pbt.wavelet_denoise(y, 3,wav_name='sym4',noise_est='level_independent',thresh_rule='median')[0] == approx(y_valid,abs=1e-5)







